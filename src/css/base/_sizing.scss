// --------------------------------------------------------------------------
// Sizing VARIABLES
// --------------------------------------------------------------------------

$Column-gutter: 20px !default;
$Column-count: 12 !default;

$Column-selector: column !default;
$Column-prefix: column- !default;
$Column-offsetSelector: column-offset- !default;

$Row-selector: row !default;
$Row-width: 100% !default;
$Row-maxWidth: 1080px !default;
$Row-margin: 0 auto !default;



// --------------------------------------------------------------------------
// Sizing FUNCTIONS 
// --------------------------------------------------------------------------




// --------------------------------------------------------------------------
// Sizing MIXINS
// --------------------------------------------------------------------------
//
// Generate columns
// Generates symmetric and asymetric grids using the $columns varible
// The Propert aug allows the generator to be used to create columns and column offsets
//

@mixin columnGenerator($Columns: $Column-count, $Prefix: $Column-prefix, $Property: 'width') {

	$Columm-total: $Columns;

	// if async grid set total columns total number of them
	@if length($Columns) > 1 {
		$Columm-total: length($Columns);
	} @else {
		
	}
		
	@for $i from 1 through $Columm-total {
		.#{$Prefix + $i} {
			@if length($Columns) > 1 {
				// if there are multiple values in the Columns variable generate an asymmetrical grid
				$Ratio: nth($Columns, $i);
				#{$Property}: percentage($Ratio / 1);
			}
			@else {
				//else there is one whole number stating the total Columns in a symmetrical grid
				#{$Property}: percentage($i / $Columns);
			}
		}
	}

}

@mixin generateColumns($Columns: $Column-count, $Prefix: $Column-prefix) {

	@include columnGenerator($Columns, $Prefix, 'width');

}



//
// Generate columns offsets
// Generates symmetric and asymetric grid offsets using the $columns varible
//

@mixin generateOffsets($Columns: $Column-count, $Prefix: $Column-offsetSelector) {

	@include columnGenerator($Columns, $Prefix, 'margin-left');

}



// --------------------------------------------------------------------------
// Sizing base
// --------------------------------------------------------------------------

.oneWhole,
%oneWhole {
	width: percentage(1 / 1);
}

.oneHalf,
%oneHalf {
	width: percentage(1 / 2);
}

.oneThird,
%oneThird {
	width: percentage(1 / 3);
}

.twoThirds,
%twoThirds {
	width: percentage(2 / 3);
}

.oneQuarter,
%oneQuarter {
	width: percentage(1 / 4);
}

.twoQuarters,
%twoQuarters {
	width: percentage(2 / 4);
}

.threeQuarters,
%threeQuarters {
	width: percentage(3 / 4);
}