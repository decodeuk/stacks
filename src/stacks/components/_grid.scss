// --------------------------------------------------------------------------
// GRID COMPONENT
// --------------------------------------------------------------------------

/**
 * The grid is used for layout and structure. It should ideally be used to
 * wrap elements rather than alongside elements/components.
 *
 * DEPENDENCIES
 * - base/clearfix
 * - base/sizing
 *
 * USED WITH
 * - base/sizing
 *
 */

 // Styleguide 24.1.0.



// --------------------------------------------------------------------------
// VARIABLES
// --------------------------------------------------------------------------

$Grid-namespace: Grid !default;
$Row-namespace: Grid-row !default;
$Row-maxWidth: false !default;
$Row-margin: 0 auto !default;
$Row-gutter: false !default; // If not false then set gutter value

$FixedGrid-namespace: Grid--fixed !default;
$c-FixedGrid-rowWidth: false !default;

$Column-namespace: Grid-column !default;
$ColumnCover-namespace: GridCover-column !default;
$Column-gutter: ($Leading * 4) !default;
$Column-padding: 0 $Column-gutter !default;




// --------------------------------------------------------------------------
// FUNCTIONS
// --------------------------------------------------------------------------



// --------------------------------------------------------------------------
// MIXINS
// --------------------------------------------------------------------------

/**
 * showGrid Mixin
 * - Adds styling to make the grid visibile
 */

@mixin showGrid($Prefix: $Column-namespace, $Prefix-2: $ColumnCover-namespace) {
	[class*="#{$Prefix}"],
	[class*="#{$Prefix-2}"] {
		background-color: darken($Colour-white, 1%);
		position: relative;

		&:before,
		&:after {
			content: '';
			position: absolute;
			top: 0;
			bottom: 0;
			width: $Column-gutter;
			background-color: darken($Colour-white, 4%);
		}

		&:before {
			left: 0;
		}

		&:after {
			right: 0;
		}
	}
}



// --------------------------------------------------------------------------
// EXTENDABLES
// --------------------------------------------------------------------------



// --------------------------------------------------------------------------
// STYLING
// --------------------------------------------------------------------------

/**
 * GRID COMPONENT STYLING
 * - Extends clearfix to stop floated children collapsing the container
 */

@if $use-component-grid == true {
	
	@include conditional( $c-FixedGrid-rowWidth ) {
		.#{$FixedGrid-namespace} {
			.#{$Row-namespace} {
				width: $c-FixedGrid-rowWidth;
				
				// NESTED ROWS SHOULD STILL BE FLUID WIDTHS
				.#{$Row-namespace} {
					width: 100%;
				}
			}
		}
	}

	
	/**
	 * Row Notes
	 * - Extends clearfix to stop floated children collapsing the container
	 * - Sets a max width if set and also adds left and right margins to center align
	 * - Adds a row gutter if set
	 */

	.#{$Grid-namespace} {
		@extend %clearfix;

		width: 100%;
		margin-left: auto;
		margin-right: auto;

		@if $Row-maxWidth != false {
			max-width: $Row-maxWidth;
			// margin-left: auto;
			// margin-right: auto;
		}

		@if $Row-gutter != false {
			padding-left: $Row-gutter;
			padding-right: $Row-gutter;
		}

		.#{$Row-namespace} {
			margin-left: -($Column-gutter);
			margin-right: -($Column-gutter);

			@if $Row-gutter != false {
				padding-left: 0;
				padding-right: 0;
			}
		}
	}

	/**
	 * Row Notes
	 * - Extends clearfix to stop floated children collapsing the container
	 * - Sets a max width if set and also adds left and right margins to center align
	 * - Adds a row gutter if set
	 */

	.#{$Row-namespace} {
		@extend %clearfix;

		width: 100%;
		margin-left: auto;
		margin-right: auto;

		@if $Row-gutter != false {
			padding-left: $Row-gutter;
			padding-right: $Row-gutter;
		}

		.#{$Row-namespace} {
			margin-left: -($Column-gutter);
			margin-right: -($Column-gutter);

			@if $Row-gutter != false {
				padding-left: 0;
				padding-right: 0;
			}
		}
	}


	/**
	 * Column Notes
	 * - Floats left to horizontally align multiple columns
	 * - Sets a default width so there is no need to add additional classes for full width columns
	 * - Adds a column gutter
	 */

	.#{$Column-namespace} {
		@extend %oneWhole;

		float: left;
		padding: $Column-padding;
		@include conditional( $c-global-boxSizing, false ) { box-sizing: border-box; }
	}

	.#{$Column-namespace + --slim} {
		padding-top: 0;
		padding-bottom: 0;
	}

	.#{$Column-namespace + --flat} {
		padding: 0;
	}

}


/**
 * GRID COVER COMPONENT STYLING
 * Creates a grid which expands column heights to that of the highest.
 * Provides the ability to vertically align columns.
 *
 * - Extends clearfix to stop floated children collapsing the container
 */

@if $use-component-gridCover == true {

	/**
	 * Row Notes
	 * - Extends clearfix to stop floated children collapsing the container
	 * - Sets a max width if set and also adds left and right margins to center align
	 * - Adds a row gutter if set
	 */

	.GridCover-row {
		@extend %clearfix;

		display: table;
		vertical-align: top;

		@if $Row-maxWidth != false {
			max-width: $Row-maxWidth;
			margin-left: auto;
			margin-right: auto;
		}

		@if $Row-gutter != false {
			padding-left: $Row-gutter;
			padding-right: $Row-gutter;
		}	
	}


	/**
	 * Column Notes
	 * - Floats left to horizontally align multiple columns
	 * - Sets a default width so there is no need to add additional classes for full width columns
	 * - Adds a column gutter
	 */

	.GridCover-column {
		@extend %oneWhole;

		display: table-cell;
		vertical-align: inherit;
		padding: $Column-padding;
		@include conditional( $c-global-boxSizing, false ) { box-sizing: border-box; }
	}

	.GridCover-row--middle,
	.GridCover-column--middle {
		vertical-align: middle;
	}

	.GridCover-row--bottom,
	.GridCover-column--bottom {
		vertical-align: bottom;
	}

	.GridCover-row--top,
	.GridCover-column--top {
		vertical-align: top;
	}

}


@if $use-component-gridUtils == true {
	.Grid--center {
		.Grid-column {
			float: none;
			margin-left: auto;
			margin-right: auto;
		}
	}
}


/**
 * SHOW GRID STYLING
 * Provides styling that makes the columns and gutters visible.
 */

@if $show-grid == true {
	@include showGrid();
}