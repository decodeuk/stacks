//
// SIZING BASE
//
// Size styling which can be used in conjunction with other objects such as the grid, media element or images.
// Sizes are responsive and based on ratios for clearer naming and understanding.
//
// DEPENDENCIES </br>
// - none
//
// EXTENDS </br>
// - %oneWhole </br>
// - %oneHalf </br>
// - %oneThird </br>
// - %twoThirds </br>
// - %oneQuarter </br>
// - %twoQuarters </br>
// - %threeQuarters
//
// VARIABLES </br>
// - $Column-gutter: 20px !default; </br>
// - $Column-count: 12 !default; </br>
// - $Column-selector: column !default; </br>
// - $Column-prefix: column- !default; </br>
// - $Column-offsetSelector: column-offset- !default; </br>
// - $Row-selector: row !default; </br>
// - $Row-width: 100% !default; </br>
// - $Row-maxWidth: 1080px !default; </br>
// - $Row-margin: 0 auto !default;
//
// Markup:
// <img src="http://placekitten.com/g/320/240" class="oneWhole {$modifiers}" alt="Cute kitten">
//
// .oneWhole 			- Removes list styling and resets left padding to 0
// .oneHalf				- Displays the list in an horizontal format. Uses the noBullet list to reset styling.
// .oneThird			- Displays the list in an horizontal format. Uses the noBullet list to reset styling.
// .twoThirds			- Displays the list in an horizontal format. Uses the noBullet list to reset styling.
// .oneQuarter			- Displays the list in an horizontal format. Uses the noBullet list to reset styling.
// .twoQuarters			- Displays the list in an horizontal format. Uses the noBullet list to reset styling.
// .threeQuarters		- Displays the list in an horizontal format. Uses the noBullet list to reset styling.
//
// Styleguide 6.1.0.



// --------------------------------------------------------------------------
// VARIABLES
// --------------------------------------------------------------------------

$Column-gutter: 20px !default;
$Column-count: 12 !default;

$Column-selector: column !default;
$Column-prefix: column- !default;
$Column-offsetSelector: column-offset- !default;

$Row-selector: row !default;
$Row-width: 100% !default;
$Row-maxWidth: 1080px !default;
$Row-margin: 0 auto !default;



// --------------------------------------------------------------------------
// FUNCTIONS 
// --------------------------------------------------------------------------




// --------------------------------------------------------------------------
// MIXINS
// --------------------------------------------------------------------------

/*
* Generate columns
* Generates symmetric and asymetric grids using the $columns varible
* The Propert aug allows the generator to be used to create columns and column offsets
*/

@mixin columnGenerator($Columns: $Column-count, $Prefix: $Column-prefix, $Property: 'width') {

	$Columm-total: $Columns;

	// if async grid set total columns total number of them
	@if length($Columns) > 1 {
		$Columm-total: length($Columns);
	} @else {
		
	}
		
	@for $i from 1 through $Columm-total {
		.#{$Prefix + $i} {
			@if length($Columns) > 1 {
				// if there are multiple values in the Columns variable generate an asymmetrical grid
				$Ratio: nth($Columns, $i);
				#{$Property}: percentage($Ratio / 1);
			}
			@else {
				//else there is one whole number stating the total Columns in a symmetrical grid
				#{$Property}: percentage($i / $Columns);
			}
		}
	}

}


/*
 * Generate columns
 */

@mixin generateColumns($Columns: $Column-count, $Prefix: $Column-prefix) {

	@include columnGenerator($Columns, $Prefix, 'width');

}


/*
* Generate columns offsets
* Generates symmetric and asymetric grid offsets using the $columns varible
*/

@mixin generateOffsets($Columns: $Column-count, $Prefix: $Column-offsetSelector) {

	@include columnGenerator($Columns, $Prefix, 'margin-left');

}



// --------------------------------------------------------------------------
// EXTENDABLES
// --------------------------------------------------------------------------

/*
 * TODO: Think of a better way to generate these classes
 */

%oneWhole {
	width: percentage(1 / 1);
}

%oneHalf {
	width: percentage(1 / 2);
}

%oneThird {
	width: percentage(1 / 3);
}

%twoThirds {
	width: percentage(2 / 3);
}

%oneQuarter {
	width: percentage(1 / 4);
}

%twoQuarters {
	width: percentage(2 / 4);
}

%threeQuarters {
	width: percentage(3 / 4);
}



// --------------------------------------------------------------------------
// STYLING
// --------------------------------------------------------------------------

@if $use-base-sizing == true {
	.oneWhole {
		@extend %oneWhole;
	}

	.oneHalf {
		@extend %oneHalf;
	}

	.oneThird {
		@extend %oneThird;
	}

	.twoThirds {
		@extend %twoThirds;
	}

	.oneQuarter {
		@extend %oneQuarter;
	}

	.twoQuarters {
		@extend %twoQuarters;
	}

	.threeQuarters {
		@extend %threeQuarters;
	}
}